AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >
  Resources for a lambda

Parameters:
  StackName:
    Type: String
    Description: The name of the main stack
  CloudWatchKMSKey:
    Type: String
    Description: Cloudwatch KMS key
    AllowedPattern: "^arn:[a-z0-9-]+:kms:[a-z0-9-]+:\\d{12}:(key|alias)/.+\\Z"
  SplunkSubscriptionFilterRole:
    Type: String
    Description: Subscription filter role for sending logs to splunk
    Default: none
  SplunkDeliveryStream:
    Type: String
    Description: Splunk delivery stream
    Default: none
  LambdaName:
    Type: String
    Description: Name of lambda we are creating for
  LambdaArn:
    Type: String
    Description: Arn of lambda we are creating resources for.
    AllowedPattern: "^(arn:(aws|aws-cn|aws-us-gov):[^:]+:[^:]*:(?:\\d{12}|\\*)?:.+|\\*)$"
  LogRetentionDays:
    Type: Number
    Description: How long to keep logs for
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1096,
        1827,
        2192,
        2557,
        2922,
        3288,
        3653,
      ]
  ExecutePolicyExportName:
    Type: String
  IncludeAdditionalPolicies:
    Type: String
    Default: false
  AdditionalPolicies:
    Type: CommaDelimitedList
    Description: A list of additional policies to attach the lambdas role (comma delimited).
    Default: none

Conditions:
  ShouldIncludeAdditionalPolicies: !Equals
    - true
    - !Ref IncludeAdditionalPolicies

Resources:
  ExecuteLambdaManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub ${LambdaArn}:*

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns: !Split
        - ","
        - !Join
          - ","
          - - !Ref LambdaManagedPolicy
            - !ImportValue lambda-resources:LambdaInsightsLogGroupPolicy
            - !ImportValue account-resources:CloudwatchEncryptionKMSPolicyArn
            - !If
              - ShouldIncludeAdditionalPolicies
              - !Join
                - ","
                - !Ref AdditionalPolicies
              - !Ref AWS::NoValue

  LambdaManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !GetAtt LambdaLogGroup.Arn
              - !Sub ${LambdaLogGroup.Arn}:log-stream:*

  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Metadata:
      guard:
        SuppressedRules:
          - CW_LOGGROUP_RETENTION_PERIOD_CHECK
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaName}"
      RetentionInDays: !Ref LogRetentionDays
      KmsKeyId: !Ref CloudWatchKMSKey

  LambdaSplunkSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !Ref SplunkSubscriptionFilterRole
      LogGroupName: !Ref LambdaLogGroup
      FilterPattern: "" # All logs
      DestinationArn: !Ref SplunkDeliveryStream

Outputs:
  ExecuteLambdaPolicyArn:
    Description: Lambda execution policy arn
    Value: !GetAtt ExecuteLambdaManagedPolicy.PolicyArn
    Export:
      Name: !Sub ${StackName}:${ExecutePolicyExportName}
  ExecuteLambdaPolicyArnNewFormat:
    Description: Lambda execution policy arn
    Value: !GetAtt ExecuteLambdaManagedPolicy.PolicyArn
    Export:
      Name: !Sub ${StackName}:functions:${LambdaName}:ExecutePolicy:Arn
  LambdaRoleArn:
    Description: "LambdaRole ARN"
    Value: !GetAtt LambdaRole.Arn
  LambdaRole:
    Description: "LambdaRole"
    Value: !Ref LambdaRole
  LogGroupName:
    Description: Lambda log group name
    Value: !Ref LambdaLogGroup
    Export:
      Name: !Sub ${StackName}:functions:${LambdaName}:LambdaLogGroupName
